[{"content":"🙌和Windows11故事的开始 像往日一样在网上冲浪，我偶然看到了一条关于Windows11镜像泄露的消息，🙄“什么！巨硬不是说Windows是最后一代Windows吗？不管了，先逝世再说”，准备好U盘，从一个还算靠谱的网站把镜像下载下来，一顿常规操作，Windows安装完毕。看着这所谓的Windows11的界面，不能说跟win10一模一样，可以说是只改了一个开始菜单，其他的几乎没变，其他几乎都没变，用起来还特别卡，只能等官方推正式版了。😂\n😐时至今日 时至今日，Windows11终于勉强好用一些了，虽然仍有一些不如人意，但是不妨碍我拿他水一篇blog.\n🎉“颜值是第一生产力” 这里先小秀一下我的Windows Desktop,照片经过压缩，有点小糊，你忍一下.\n现在的Windows11采用的是Mica材质和圆角风格，比起早期的Windows11，现在圆角风格已经适配到了许多app，个人感觉还是很好看的。\n🤞右键菜单 虽然二级菜单可能影响效率，但是它整洁啊！我就喜欢的简洁的布局，安装带有右键菜单的软件增多后，Windows10的右键菜单就会很显示出弊端，长长的一端看起来特别难受。\n😅原生输入法 带有Windows11风格的原生输入法比Windows10的小一点，接近macos的风格，win11输入法可以在设置中切换不同风格，但是我个人偏好win11默认dark风格，我一直是很喜欢使用原生输入法的，比起第三方输入法简洁很多。\n🙄资源管理器 Windows11早期的版本的资源管理器可谓是3A大作，打开要等很多久，而且拖拽也特别卡，不过随着巨硬的不断优化，现在的资源管理器有了明显的好转，动画速度也变快了，而且也优化了OneDrive的使用，原生支持了多标签页，内存占用算是比较低的。\n📎Emoji 自从微软推出3D风格的emoji,我就喜欢上了emoji的使用，win11上的emoji比较立体圆润，看着非常不错。\n😃开始菜单 Windows11的开始菜单在刚出的时候可以说是饱受诟病,不过现在好多了,同样是因为二级菜单的原因,缺少了点效率,但是勉强能接受,平时开始菜单用的不是很多,没什么好说的.\n","date":"2023-04-04T00:51:54-07:00","image":"https://blog.linsnow.cn/p/win11-experience/win11experience.png","permalink":"https://blog.linsnow.cn/p/win11-experience/","title":"一份不迟不早Windows11使用体验报告"},{"content":"🙃缘起: *进坑Hugo这么久了,是时候也开一篇记录一下建站过程了.*本教程是面向小白而写的,所以可能有些东西写的很罗嗦,所以大佬手下留情.本文稍微有点长,所以请保持耐心.😅\n写这篇的一个主要原因有三:\n记录并回顾此站从新建文件夹到诞生的主要过程 帮助一些小白入坑hugo 使文章数加一(doge 📢声明: 由于本人人菜瘾大,技术十分之有限,写的代码非常之烂,都是本着能用就行写的,所以请大佬手下留情.\n📑本篇教程编写环境: 操作系统:\tWindows 11 专业版 22H2\nMicrosoft Edge版本 107.0.1418.62 (正式版本) (64 位)\nMarkdown编辑器: Typora\n博客配置编辑器: VS Code\n命令行工具:Git、Terminal\nHugo版本:hugo extended0.107.0_windows-amd64\nHugo主题:hugo-theme-stack\n使用的主要路径: 桌面、D盘\n基本上就这些了\u0026hellip;.\n🧀Hugo环境搭建 使用hugo之前,必须配置hugo环境,这跟hexo要安装node和npm差不多. 下载的操作建议按照先安装VScode再安装GIt的顺序操作,因为后面的Git有个设置选项需要先有VScode编辑器\n🎈安装VScode 1.从官网获取VScode的安装包\nVScode官网: https://code.visualstudio.com/Download\n2.打开安装包并安装,选择I accept the agreement,然后选择Next\n3.全部打勾勾后选择下一步,这个很重要!\n4.选择install开始安装,等待安装完成后选择Finish\n5.至此,VScode就安装完成了,接下来安装Git\n🎈安装Git 1.从官网下载Git的安装包\nGit官网下载地址: https://git-scm.com/download/win\n2.打开下载好的安装包进行安装\n3.直接默认安装路径然后选中下一步\n4.直接下一步\n5.这里很重要,如果之前没有安装vscode,这里就选不了该选项\n6.后面的就全部默认就行,一直选next直到完成安装\n7.至此,git安装完成,接下来进行hugo的安装\n🎈安装hugo 1.从hugo官方github仓库下载hugo,记得必须使用带有extended的版本\nhugo官方下载地址: https://github.com/gohugoio/hugo/releases\n2.在D盘下创建文件夹名为hugo,进入hugo文件夹下并创建名为bin的文件夹,将下载下来的zip文件解压到bin里面\n完整的路径即为: D:\\hugo\\bin\n3.接下来设置hugo环境变量,依次打开设置,然后选择系统,滑到下面选择系统信息,打开高级系统设置\n4.打开环境变量\n5.分别进入一下选项中进行添加D:\\hugo\\bin\\\n6.检查一下hugo是否安装成功,打开cmd或终端输入hugo version,如果输出一下内容则证明配置成功\n🎈小结 恭喜!到这里,基本就都配置完毕了,现在可以开始博客的搭建了\n🎊Hugo博客搭建 🎈初始化博客 在桌面右键,选择在终端打开,然后输入以下命令\nhugo new site blog 然后桌面会出现一个名为blog的文件夹,可以用VScode打开文件夹并打开终端进行后续操作\n🎈hugo-theme-stack安装 1.删掉默认的配置文件config.toml\n2.打开终端输入以下命令\ngit init #获取主题文件 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 3.将获取到的主题文件中的exampleSite中的config.yaml拷贝到blog根目录中\n并进行配置,根据自己需要进行配置,这里我贴出自己的配置图共参考\n官方配置文档: https://stack.jimmycai.com/config/\nbaseurl: https://blog.linsnow.cn/ languageCode: zh-cn theme: hugo-theme-stack paginate: 7 title: L1nSn0w\u0026#39;s Blog languages: zh-cn: languageName: 中文 title: L1nSn0w\u0026#39;s Blog description: 无限进步.✍️ weight: 1 # en: # languageName: English # title: Example Site # description: Example description # weight: 2 # Change it to your Disqus shortname before using disqusShortname: hugo-theme-stack # GA Tracking ID googleAnalytics: # Theme i18n support # Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: zh-cn # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: true permalinks: post: /p/:slug/ page: /:slug/ params: mainSections: - post featuredImageField: image rssFullContent: true favicon: /img/favicon.ico # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) footer: since: 2020 customText: dateFormat: published: Jan 02, 2006 lastUpdated: Jan 02, 2006 15:04 MST sidebar: compact: false emoji: 🍥 subtitle: 无限进步.✍️ avatar: enabled: true local: false src: /img/avatar.png article: math: false toc: true readingTime: true license: enabled: true default: Licensed under CC BY-NC-SA 4.0 comments: enabled: true provider: waline disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: utterances: repo: issueTerm: pathname label: remark42: host: site: locale: vssue: platform: owner: repo: clientId: clientSecret: autoCreateIssue: false # Waline client configuration see: https://waline.js.org/en/reference/component.html waline: serverURL: https://waline.linsnow.cn/ lang: pageview: true emoji: - /source/Sticker-100/ requiredMeta: - name - email locale: admin: 👻屑博主 placeholder: 🎉留下你的脚印. twikoo: envId: region: path: lang: # See https://cactus.chat/docs/reference/web-client/#configuration for description of the various options cactus: defaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34; serverName: \u0026#34;cactus.chat\u0026#34; siteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site) giscus: repo: repoID: category: categoryID: mapping: lightTheme: darkTheme: reactionsEnabled: 1 emitMetadata: 0 gitalk: owner: admin: repo: clientID: clientSecret: cusdis: host: id: widgets: homepage: - type: search - type: archives params: limit: 3 - type: categories params: limit: 10 - type: tag-cloud params: limit: 10 page: - type: toc opengraph: twitter: # Your Twitter username site: # Available values: summary, summary_large_image card: summary_large_image defaultImage: opengraph: enabled: false local: false src: colorScheme: # Display toggle toggle: true # Available values: auto, light, dark default: light imageProcessing: cover: enabled: false content: enabled: false ### Custom menu ### See https://docs.stack.jimmycai.com/configuration/custom-menu.html ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: [] social: - identifier: rss name: RSS url: /index.xml params: newTab: true icon: rss - identifier: github name: GitHub url: https://github.com/lin-snow params: newTab: true icon: brand-github related: includeNewer: true threshold: 60 toLower: false indices: - name: tags weight: 100 - name: categories weight: 200 markup: goldmark: renderer: ## Set to true if you have HTML content inside Markdown unsafe: true tableOfContents: endLevel: 4 ordered: true startLevel: 2 highlight: noClasses: false codeFences: true guessSyntax: true lineNoStart: 1 lineNos: false lineNumbersInTable: true tabWidth: 4 将~themes/hugo-theme-stack/exampleSite里的content整个文件夹复制到根目录中,然后即可在根目录的content中创建md文件进行blog了\n🎈配置博客各个页面 这部分的配置在官方文档中很详细,就不重复造轮子了,直接给出官方文档\nhttps://stack.jimmycai.com/config/menu\n🎈开始创作 博客文章主要都存放在content中,这里可以参考一下我的content文件夹布局,例如我现在想要创建一篇文章,我们可以在blog根目录下打开终端输入hugo new post/2022/XXXX.md这条命令的意思是在conent/post/2022里创建一个名为XXXX.md的文件\n官方写作文档: https://stack.jimmycai.com/writing/markdown\n├───categories │ ├───blog │ ├───css │ ├───html │ ├───ios │ ├───jailbreak │ ├───javascript │ ├───软件 │ └───随笔 ├───page │ ├───about │ ├───archives │ ├───home │ ├───links │ ├───log │ └───search └───post ├───2021 ├───2022 │ ├───android-tv │ ├───app-store-good-things │ ├───join-hugo-and-stack │ ├───keykey │ ├───m73-hackintosh │ ├───send-file │ └───setup-apple-books 差不多就这些了,自己摸索一下还是能搞懂的\u0026hellip;.\n🏐Hugo博客配合Action部署到Github 🎈注册GitHub 打开https://github.com/,(打不开的可能需要魔法,或者换个时间点打开,具体怎么操作就不细说了,懂得都懂😶),注册一个GitHub账号,如果不会注册那你还来看这篇文章干嘛.\n🎈创建Github仓库 为了使用GitHub Action自动部署,加上便于管理,所以创建两个仓库,虽然一个也行.\n1.我们先创建一个名字为blog的仓库用于存放hugo生成的文件,打开右上角的+号,然后选择New repository以新建仓库\n2.跟着图片里的步骤操作,先给仓库取个名字,叫做blog(小白最好将仓库名字跟我起一样的),然后勾选public,接着勾选Add a REAMME file,最后点击Create repository完成创建.\n3.接下来我们按照刚才那样依葫芦画瓢,再创建一个名为blog-file的仓库\n🎈获取SSH Key密钥 ssh密钥可以是我们推送文件到仓库时不需要每次都输入密码,大大的提高我们的效率.所以我们首先需要在我们的电脑生成ssh密钥\n1.在git bash执行以下指令,配置邮箱和用户名\ngit config --global user.email \u0026#34;you@example.com\u0026#34; #you@example.com替换为你的邮箱并回车 git config --global user.name \u0026#34;Your Name\u0026#34; #Your Name替换为你的名字并回车 2.生成shh key,在git bash中 输入以下命令\nssh-keygen -t rsa 一路回车就行\n默认会生成在如下目录\nC:\\Users\\用户名\\.ssh 用记事本打开生成目录下id_rsa.pub,其中的内容即为公钥,id_rsa即为私钥.这两个待会要用到.\n3.将将公钥配置到GitHub账户中,先打开设置,即Settings\n进入SSH and GPG key配置项里,点击SSH keys下的New SHH key进行添加\n4.然后随便在Title项里随便起一个名字,在Key里填入刚才得到的id_rsa.pub里的内容,然后点击Add SSH key就添加好了.\n5.接下来我们需要往刚才创建的名为blog-file的仓库里添加id_rsa密钥,点击Settings,然后找到Secrets and variables,点击Actions,然后点击New repository secret，在Name里填入ACTIONS_DEPLOY_KEY，在Value里填入id_rsa密钥即可。\n🎈部署hugo博客 1.接下来我们在我们的博客根目录下创建一个名为.github的文件夹,然后在文件夹里新建一个新的文件夹,名字为workflows,接着进入workflows文件夹里新建一个名为deploy.xml的文件,再在deploy.xml里填入如下内容,最终目录为~\\blog\\.github\\workflows\\deploy.xml,将deploy.xml中的external_repository项里的lin-snow改为你GitHub注册时的名字即可\nname: GitHub Page on: push: branches: - main # main 更新触发 jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # clone submodules fetch-depth: 0 # 克隆所有历史信息 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.115.2\u0026#34; # Hugo 版本 extended: true # hugo插件版 Stack主题 必须启用 - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v3 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build # 生成网页 删除无用 resource 文件 削减空行 run: hugo --minify --gc - name: Deploy # 部署到 GitHub Page uses: peaceiris/actions-gh-pages@v3 with: # 如果在同一个仓库下使用请使用 github_token 并注释 deploy_key # github_token: ${{ secrets.GITHUB_TOKEN }} deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 如果在同一个仓库请注释 external_repository: lin-snow/blog # 你的 GitHub page 仓库 example/example.github.io publish_dir: ./public user_name: \u0026#34;github-actions[bot]\u0026#34; user_email: \u0026#34;github-actions[bot]@users.noreply.github.com\u0026#34; full_commit_message: Deploy from ${{ github.repository }}@${{ github.sha }} 🚀 2.然后在博客根目录文件夹下新建一个名为deploy.sh的文件用于一键部署博客,在deploy.sh中填入如下内容,其中最后一行代码里的git@github.com:lin-snow/blog-file.git需要更改为你自己仓库的地址,可以通过如下图片中的操作获得该地址\nhugo #构造你的blog git init #初始化git git add -A git commit -m \u0026#39;deploy\u0026#39; git push -f git@github.com:lin-snow/blog-file.git main#向存储库推送 然后双击打开运行deploy.sh即可自动推送文件到仓库,以后写完博客或修改博客后都需要运行一下deploy.sh,才能部署到云端\n3.接下来我们先运行deploy.sh推送一下文件到仓库,等推送上去之后,我们才能完成接下来的操作.\n注意,第一次运行deploy.sh可能会出现如图这种情况,直接输入yes回车即可,如果仓库里没发现上传的文件可以再运行一次deploy.sh\n这里贴出我的GitHub Action运行状况\n🎈开启Github Page 等待Github Action完成后,我们需要开启GitHub page,首先进入blog这个仓库,然后打开设置,找到page项,根据如下设置即可.\n到这里我们就成功上线我们的博客了.至于自定义域名可以在网上找到很多教程,这里就不写了,毕竟我比较懒.\n🍥Hugo主题魔改 由于之前魔改部分写的很慢,又考虑过出个魔改好的主题直接给人们用,后来想想了还是算了,毕竟博客怎么能缺少折腾的乐趣呢,于是乎我花了点时间把魔改内容进行了一些休整,以内容呈现为核心,放弃了很多花哨的东西,加上考虑到魔改的难易程度与网页加载快慢,最后精简成一个custom.scss文件,并做了注释,直接使用即可完成一些个性化调整.由于本人纯小白,所以可能还有可以优化的地方,如果你有更好的方案欢迎在下方探讨交流.🤔\n首先在博客根目录下的assets下创建一个名为scss的文件夹,然后在scss文件夹里创建一个名为custom.scss的文件,最终效果为~blog/assets/scss/custom.scss,创建好文件后,我们在里面写入如下内容:👇\n// 页面基本配色 :root { // 标题左栏小白条调整 --heading-border-size: 6px; // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; //标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 32px; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 全局字体大小 --article-font-size: 1.8rem; \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; } } //--------------------------------------------------- // 文章内容图片圆角阴影 .article-page .main-article .article-content { img { max-width: 96% !important; height: auto !important; border-radius: 8px; } } //------------------------------------------------ // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #358b9a1f !important; background: #3a97431f; } } // --------------------------------------- // 代码块样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fff9f3; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fff9f3cc; } //------------------------------------------- // 设置选中字体的区域背景颜色 //修改选中颜色 ::selection { color: #fff; background: #34495e; } a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { color: #4288b9ad; font-weight: 600; padding: 0 2px; text-decoration: none; cursor: pointer; \u0026amp;:hover { text-decoration: underline; } } } // -------------------------------- // 菜单栏样式 // 下拉菜单改圆角样式 .menu { padding-left: 0; list-style: none; flex-direction: column; overflow-x: hidden; overflow-y: scroll; flex-grow: 1; font-size: 1.6rem; background-color: var(--card-background); box-shadow: var(--shadow-l2); //改个阴影 display: none; margin: 0; //改为0 border-radius: 10px; //加个圆角 padding: 30px 30px; @include respond(xl) { padding: 15px 0; } \u0026amp;, .menu-bottom-section { gap: 30px; @include respond(xl) { gap: 25px; } } \u0026amp;.show { display: flex; } @include respond(md) { align-items: flex-end; display: flex; background-color: transparent; padding: 0; box-shadow: none; margin: 0; } li { position: relative; vertical-align: middle; padding: 0; @include respond(md) { width: 100%; } svg { stroke-width: 1.33; width: 20px; height: 20px; } a { height: 100%; display: inline-flex; align-items: center; color: var(--body-text-color); gap: var(--menu-icon-separation); } span { flex: 1; } \u0026amp;.current { a { color: var(--accent-color); font-weight: bold; } } } } //------------------------------------------------ //菜单滚动条美化 .menu::-webkit-scrollbar { display: none; } // 全局滚动条美化 html { ::-webkit-scrollbar { width: 20px; } ::-webkit-scrollbar-track { background-color: transparent; } ::-webkit-scrollbar-thumb { background-color: #d6dee1; border-radius: 20px; border: 6px solid transparent; background-clip: content-box; } ::-webkit-scrollbar-thumb:hover { background-color: #a8bbbf; } } //-------------------------------------------------- //归档页面双栏 /* 归档页面两栏 */ @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 16px; } } } //-------------------------------------------------- //友情链接三栏 @media (min-width: 1024px) { .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: var(--card-border-radius); \u0026amp;:nth-child(odd) { margin-right: 8px; } } } } //------------------------------------------------- //文章封面高度更改 .article-list article .article-image img { width: 100%; height: 150px; object-fit: cover; @include respond(md) { height: 200px; } @include respond(xl) { height: 305px; } } //--------------------------------------------------- //全局页面布局间距调整 .main-container { min-height: 100vh; align-items: flex-start; padding: 0 15px; gap: var(--section-separation); padding-top: var(--main-top-padding); @include respond(md) { padding: 0 37px; } } //------------------------------------------------------ // 修复引用块内容显示问题 a { word-break: break-all; } code { word-break: break-all; } //------------------------------------------------------- //全局页面小图片样式微调 .article-list--compact article .article-image img { width: var(--image-size); height: var(--image-size); object-fit: cover; border-radius: 17%; } //---------------------------------------------------------- //为代码块顶部添加macos样式 .article-content { .highlight:before { content: \u0026#34;\u0026#34;; display: block; background: url(/img/code-header.svg); height: 32px; width: 100%; background-size: 57px; background-repeat: no-repeat; margin-bottom: 5px; background-position: -1px 2px; } } 大家可以根据需要调试更改和增删一些参数,后续的魔改内容也会更新在这个文件里.😀如果你有什么好的想法欢迎在评论区留言交流.\n🍀参考及鸣谢 主题文档:https://stack.jimmycai.com/\nhugo文档:https://gohugo.io/\ngithub action参考:Stack主题 + GitHub Action (zhixuan.dev)\n魔改参考自:\nHugo Stack主题更新小记 (xrg.fj.cn)\nHugo Stack 主题配置与使用 | Bore\u0026rsquo;s Notes\n墨纹 (munlelee.github.io)\nSSpiritsの秘密基地 (lv5.moe)\n『Hugo』Hugo Styles (echosec.top)\n\u0026hellip;.\n","date":"2022-12-17T22:17:06+08:00","image":"https://blog.linsnow.cn/p/join-hugo-and-stack/hugostack.png","permalink":"https://blog.linsnow.cn/p/join-hugo-and-stack/","title":"拥抱最好用的hugo之stack"},{"content":"前言 其实这本来打算在寒假写的，但是由于我懒和其他一些原因，就拖到了现在。对于电脑有一点点了解后确实心痒痒，看见图吧大佬各种人才我寻思着自己捡一台垃圾，很幸运的是在b站看到了司波图大佬的捡垃圾视频，我也是成功上车了，前前后后属实很折腾，本篇文章算是记录一下吧，你看到的这篇blog也是在这台电脑下敲的.\n正文 捡垃圾的渠道我是海鲜市场和某宝配合着用的，因为有些东西在某宝和海鲜市场基本一样的价格。本次捡垃圾也算是比较顺利，花700块钱就装好，用来日常使用和体验macOS，组建Apple生态挺不错的，这价格还要什么自行车\u0026hellip;\n配置 买的是联想M73 Tiny准系统\n什么是准系统，就是带散热器、机箱、主板的一个套装，买来后只需自行购买欠缺的配件装上就行了.\n配件类别 具体型号 主板 H81(联想M73 Tiny） CPU Intel i3-4360标压 内存条 杂牌ddr3 1333MHz 4G*1 硬盘 杂牌120g固态硬盘 电源 联系原装90w电源 转接头 dp转hdmi转接头 视频输出线 家里闲置的HDMI转HDMI线 网卡 博通bcm94352hmb 天线 一代的IPEX内置天线 小机机的外貌，内部图就不拍了，我懒得拆开\n折腾之白名单 为了能够用上这张bcm94352hmb，联想m73必须刷白名单才行，好在司波图在一期视频有讲解如何刷白名单，算是比较轻松的一部分，不过bios的版本貌似有点低，导致我后续小机机出了各种毛病，无奈只能更新一下bios了，不得不说联想的bios是真的乱，查了好多个联想网站都找不到这台机子的bios，后来才知道得着美国联想官网里才能找到，真是**了，白名单和bios算是折腾完了\n折腾之黑苹果 这个为什么很折腾呢，不是网上有很多人做好了efi吗？很不幸，司波图大佬的efi只能安装macOS10.15，无法安装big sur，且开机略慢。GitHub也有开源的一些efi，但是也是各种毛病，且多年没有维护了，问题很多。 为了完美的体验，只好直接为小机机定制EFI，这里便是噩梦的开始，很折腾，要么开机进去后直接黑屏，要么开机一半自动关机，或者网卡不能驱动，基本都是efi的问题，由于技术有限，只能慢慢对efi做调整，各处爬帖子. 算是功夫不负有心人，总算是给配出来了，也吃上完了完美黑苹果，真香。\n折腾之定制USB 由于macOS11.3之后的系统变动，安装和更新新版必须要定制USB端口，否则会卡代码和USB用不了，无奈只能装个windows给这台机子定制USB端口，更***的是，由于定制好USB后要给efi添加两个驱动，但是我的疏忽，只添加了一个驱动，所以就导致后来的各种毛病，好在后来才发现了问题\u0026hellip;.\n成果分享之EFI 整了这么久，如果没有网上一些热心网友的帮助，我可能还要撞很多坑，因此，我打算把我的EFI也开源出了，让大家使用。 这里就简单的给我这个EFI做个介绍吧。 这个EFI提供了过的版本的专属config共选择使用。\n其中包括从macOS10.15到macOS12各大版本的config文件，使用只需把想要用的config对应的文件改名为config.plist即可，想要看跑代码过程可以在引导界面按下win+v键即可.\n目前该opencore的版本为0.78，全部文件均使用来自官方的最新文件，对每个不必要的选项进行了精简优化，三码已经去掉了，只需自行加上三码即可.但是机型最好不要更改，防止无法安装.后续版本的更新看心情和时间，有问题的可以直接在本文下评论.\n整个EFI大致结构如下： 采用oc最新版，包括驱动，并且有我维护，随缘更新.\nhackintools图： 引导界面： 获取EFI Github地址:\nhttps://github.com/lin-snow/hackintosh-m73-tiny\n👋如果你白嫖了，希望可以点歌免费的star或者考虑打赏该项目，求求了\n一些功能演示图： 隔空投送 网卡蓝牙驱动 支持4k和多种分辨率\n其他 每个接口基本都能正常使用，包括耳机接口.板载声卡已正确驱动.\n鸣谢 国光：国光 (sqlsec.com)\nOpenCore 安装指南 (dortania.github.io)\n司波图：司波图的个人空间_哔哩哔哩_bilibili\n黑果小兵： 黑果小兵的部落阁 (daliansky.net)\nopencorepkg： 发布 ·acidanthera/OpenCorePkg (github.com)\noc编辑器：ic005k/OCAuxiliaryTools: Cross-platform GUI management tools for OpenCore（OCAT） (github.com)\n群友们的热心解答\n\u0026hellip;\u0026hellip;.\n求个Star： 本博客一直用爱发电，此EFI项目已经开源给了大家，如果这个项目对你有帮助，希望可以考虑给这个项目点个免费star\n","date":"2022-03-04T16:45:33+08:00","image":"https://blog.linsnow.cn/p/m73-hackintosh/hackintosh.png","permalink":"https://blog.linsnow.cn/p/m73-hackintosh/","title":"记我的第一次捡垃圾之M73"}]